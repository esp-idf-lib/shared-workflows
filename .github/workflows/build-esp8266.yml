---
name: Build ESP8266
on:
  workflow_call:

jobs:
  target:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.parse-eil.outputs.result }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Parse .eil.yml
        id: parse-eil
        run: |
          echo result=`bin/eil-q targets | uniq | grep esp8266` >> ${GITHUB_OUTPUT}
          cat ${GITHUB_OUTPUT}

  build_esp8266:
    name: Build for ESP8266
    if: ${{ needs.target.outputs.result == 'esp8266' }}
    runs-on: ubuntu-latest
    needs:
      - target
    strategy:
      fail-fast: false
      matrix:
        branch:
          - master
    steps:
      - id: checkout
        name: Checkout
        uses: actions/checkout@v3

      - id: setup_ruby
        name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.3"

      - id: rewrite_kconfig
        name: Rewrite Kconfig for ESP8266
        run: |
          # XXX ESP8266 RTOS SDK uses old Kconfig parser, which does not
          # understand "rsource" keyword. Rewrite all the Kconfig.projbuild in
          # the example directories.
          bin/rewrite_kconfig examples/*/*/Kconfig.projbuild

      - id: setup_python
        name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - id: prerequisites
        name: Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get -y install \
            bison          \
            ccache         \
            flex           \
            gcc            \
            git            \
            gperf          \
            libffi-dev     \
            libncurses-dev \
            libssl-dev     \
            make           \
            wget

      - name: Set environment variables
        id: set_env
        run: |
          SDK_NAME="ESP8266_RTOS_SDK"
          GCC_PREFIX="xtensa-lx106-elf"
          GCC_FILE="${GCC_PREFIX}-gcc"
          TOOLCHAIN_DIR="${HOME}/.espressif/tools"
          REPO_DIR=`pwd`
          EXAMPLE_DIR="${REPO_DIR}/examples"
          __PROJECT_PATH=`pwd`
          __PROJECT_TOOLCHAIN_VERSION="esp-2020r3-49-gd5524c1-8.4.0"

          # XXX actions/checkout does not allow to checkout a repository other
          # than under __PROJECT_PATH
          IDF_PATH="${__PROJECT_PATH}/idf"

          echo "IDF_PATH=${IDF_PATH}" >> ${GITHUB_ENV}
          echo "IDF_TARGET=esp8266" >> ${GITHUB_ENV}

          # cache-idf-tools needs PROJECT_TOOLCHAIN_DIR
          echo "PROJECT_TOOLCHAIN_DIR=${TOOLCHAIN_DIR}" >> $GITHUB_OUTPUT

          # XXX prefix all the environment variables with `__PROJECT_` to avoid pollution
          echo "__PROJECT_EXAMPLE_DIR=${EXAMPLE_DIR}" >> ${GITHUB_ENV}
          echo "__PROJECT_GCC_FILE=${GCC_FILE}" >> ${GITHUB_ENV}
          echo "__PROJECT_GCC_PREFIX=${GCC_PREFIX}" >> ${GITHUB_ENV}
          echo "__PROJECT_TOOLCHAIN_DIR=${TOOLCHAIN_DIR}" >> ${GITHUB_ENV}
          echo "__PROJECT_PATH=${__PROJECT_PATH}" >> ${GITHUB_ENV}
          echo "__PROJECT_BUILD_COMMAND=${__PROJECT_BUILD_COMMAND}" >> ${GITHUB_ENV}
          echo "__PROJECT_BUILD_COMMAND_ARG=${__PROJECT_BUILD_COMMAND_ARG}" >> ${GITHUB_ENV}
          echo "__PROJECT_TOOLCHAIN_VERSION=${__PROJECT_TOOLCHAIN_VERSION}" >> ${GITHUB_ENV}

      - name: Checkout the SDK
        uses: actions/checkout@v3
        with:
          repository: espressif/ESP8266_RTOS_SDK
          path: idf
          submodules: recursive
          ref: ${{ matrix.branch }}
          fetch-depth: 0

      - name: Install python requirements (pip)
        run: |
          python -m pip install --user -r ${IDF_PATH}/requirements.txt

      - id: cache-idf-tools
        name: Cache toolchain
        if: ${{ matrix.branch != 'master' }}
        uses: actions/cache@v3
        with:
          path: ${{ steps.set_env.outputs.PROJECT_TOOLCHAIN_DIR }}
          key: ${{ runner.os }}-${{ matrix.branch }}-esp8266-cache-tools

      - name: Install toolchain
        if: ${{ steps.cache-idf-tools.outputs.cache-hit != 'true' || matrix.branch == 'master' }}
        run: |
          ${IDF_PATH}/install.sh

      - name: Setup ccache (make)
        run: |
          __PROJECT_CCACHE_BIN_DIR="${HOME}/ccache_bin"
          mkdir -p "${__PROJECT_CCACHE_BIN_DIR}"
          (cd "${__PROJECT_CCACHE_BIN_DIR}" && ln -s /usr/bin/ccache "${__PROJECT_GCC_FILE}")
          echo "PATH=${__PROJECT_CCACHE_BIN_DIR}:$PATH:${__PROJECT_TOOLCHAIN_DIR}/${__PROJECT_GCC_PREFIX}/${__PROJECT_TOOLCHAIN_VERSION}/${__PROJECT_GCC_PREFIX}/bin" >> ${GITHUB_ENV}
          echo "CCACHE_BASEDIR=${__PROJECT_EXAMPLE_DIR}" >> ${GITHUB_ENV}
          echo "CCACHE_NOHASHDIR=true" >> ${GITHUB_ENV}

      - name: Build (make)
        run: |
          # make sure gcc is in $PATH
          echo ${PATH}
          ${__PROJECT_GCC_FILE} --version

          # XXX share cache between examples.
          # see "Compiling In Different Directories" in ccache(1)
          # |                                        |  4.0.1  | master  |
          # |----------------------------------------|---------|---------|
          # | without ccache                         | 33m 42s | 50m 27s |
          # | CCACHE_BASEDIR and CCACHE_NOHASHDIR    | 10m 41s | 16m 38s |
          export CCACHE_BASEDIR="${__PROJECT_EXAMPLE_DIR}"
          export CCACHE_NOHASHDIR=true

          for dir in `ls -1 examples`; do
            cd "${dir}
            echo "Building an example in directory ${PWD}..."
            make defconfig
            make -j$(nproc)
            cd -
          done
